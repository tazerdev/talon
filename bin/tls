#!/opt/talon/bin/python3

import os
import sys
import json
import pytz
import wave
import ephem
import guano
import signal
import argparse
import configparser
from pathlib import Path
from astral.sun import sun
from astral import LocationInfo
from datetime import datetime as dt
from datetime import timedelta

def signal_handler(signum, frame):
    signal.signal(signum, signal.SIG_IGN)

    print("CTRL-C detected, cleaning up before exiting...")

    sys.exit(0)

def get_metadata(wavefile, defaults):
    # prefer guano header
    metadata = get_guano_md(wavefile)

    curpath, filename = os.path.split(wavefile)
    filename, extension = os.path.splitext(filename)

    # fallback, collect detail from wave file itself and the file name
    if not metadata:
        try:
            if filename.find('-'):
                fparsed = filename.split('_')
                metadata['start'] = dt.strptime(f"{fparsed[1]} {fparsed[2]}", '%Y%m%d %H%M%S%z')

            metadata['station'] = fparsed[0]
            metadata['wave'] = wavefile
            metadata['moonphase'] = ephem.Moon(metadata['start']).moon_phase
            metadata['latitude'] = defaults['latitude']
            metadata['longitude'] = defaults['longitude']
            metadata['timezone'] = defaults['timezone']
            metadata['device'] = defaults['device']
            metadata['name'] = fparsed[0]
            metadata['copyright'] = defaults['copyright']

            # get WAV details straight from the WAV file
            if os.path.exists(wavefile):
                # wave.open doesn't like a PosixPath, so we must convert it to a string.
                with wave.open(str(wavefile)) as w:
                    metadata['rate'] = w.getframerate()
                    w.setpos(0)
                    nfr = w.getnframes()
                    metadata['duration'] = nfr / metadata['rate']
                    metadata['channels'] = w.getnchannels()
                    metadata['format'] = f"PCM_{w.getsampwidth() * 8}"

            w.close()
        except (IndexError, ValueError) as e:
            if debug:
                print(f"Error {e} when parsing filename: {wavefile}")
        except AttributeError as e:
            if debug:
                print(f"filename: {wavefile}, type: {type(wavefile)}")
                print(e)
        except wave.Error as e:
            json_file = filename + '.json'

            if os.path.exists(json_file):
                with open(json_file) as f:
                    data = json.load(f)
                
                metadata['rate'] = data['rate']
                metadata['duration'] = -1
                metadata['channels'] = data['channels']
                metadata['format'] = data['format']
            else:
                metadata['rate'] = -1
                metadata['duration'] = -1
                metadata['channels'] = -1
                metadata['format'] = "NA"

            if debug:
                print(f"{wavefile} likely being written to: {e}")

    metadata['birdnet'] = False
    metadata['nighthawk'] = False
    
    bn_file = os.path.join(curpath, filename + '.BirdNET.results.r.csv')
    nh_file = os.path.join(curpath, filename + '_detections.csv')

    if os.path.exists(bn_file):
        metadata['birdnet'] = True

    if os.path.exists(nh_file):
        metadata['nighthawk'] = True

    curtz = pytz.timezone(metadata['timezone'])

    curdate = metadata['start'].date()
    starttime = metadata['start']
    stoptime = metadata['start'] + timedelta(seconds=metadata['duration'])

    location=LocationInfo(name='', region='', timezone=metadata['timezone'], latitude=metadata['latitude'], longitude=metadata['longitude'])
    astrodawn = sun(location.observer, date=curdate, dawn_dusk_depression=18, tzinfo=curtz)['dawn'].replace(microsecond=0)
    astrodusk = sun(location.observer, date=curdate, dawn_dusk_depression=18, tzinfo=curtz)['dusk'].replace(microsecond=0)

    if starttime >= astrodusk or starttime < astrodawn or stoptime >= astrodusk or stoptime < astrodawn:
        metadata['nfc'] = True
    else:
        metadata['nfc'] = False

    return metadata

def get_guano_md(wavefile):
    metadata = {}

    try:
        g = guano.GuanoFile(wavefile)

        metadata['latitude'] = float(g['loc position'].split()[0]) 
        metadata['longitude'] = float(g['loc position'].split()[1])
        metadata['start'] = dt.fromisoformat(g['timestamp']) #
        metadata['wave'] = g['original filename'] #
        metadata['duration'] = float(g['length']) #
        metadata['rate'] = int(g['samplerate']) #
        metadata['name'] = g['TA|station'] #
        metadata['moonphase'] = float(g['TA|moonphase']) #
        metadata['timezone'] = g['TA|timezone']
        metadata['format'] = g['TA|format'] #
        metadata['channels'] = int(g['TA|channels']) #
        metadata['device'] = g['TA|device']
        metadata['copyright'] = g['TA|copyright']
    except KeyError as e:
        if debug:
            print(f"Key(s) not found: {e}")
        
            for key, value in g.items():
                print(key, value)

            print("")
    except wave.Error as e:
        if debug:
            print(f"{wavefile} likely being written to: {e}")

    return metadata

def write_guano_md(metadata, force, check):
    """
    Writes metadata to WAV file after the recording is finished.
    """
    try:
        if debug:
            print(f"Writing GUANO data to {metadata['wave']}")
            print(f"g['loc position'] = {metadata['latitude']} {metadata['longitude']}")
            print(f"g['timestamp'] = {metadata['start'].isoformat()}")
            print(f"g['original filename'] = {metadata['wave']}")
            print(f"g['length'] = {metadata['duration']}")
            print(f"g['samplerate'] = {metadata['rate']}")
            print(f"g['TA|station'] = {metadata['name']}")
            print(f"g['TA|moonphase'] = {metadata['moonphase']}")
            print(f"g['TA|timezone'] = {metadata['timezone']}")
            print(f"g['TA|format'] = {metadata['format']}")
            print(f"g['TA|channels'] = {metadata['channels']}")
            print(f"g['TA|device'] =  {metadata['device']}")
            print(f"g['TA|copyright'] = {metadata['copyright']}")

        # write guano header
        g = guano.GuanoFile(metadata['wave'])

        # we have guano metadata
        if len(g.to_string()) == 0 or force:
            if check:
                print(f"No GUANO metadata detected in {metadata['wave']}.")
            else:
                g['loc position'] = f"{metadata['latitude']} {metadata['longitude']}"
                g['timestamp'] = metadata['start'].isoformat()
                g['original filename'] = metadata['wave']
                g['length'] = metadata['duration']
                g['samplerate'] = metadata['rate']
                g['TA|station'] = metadata['name']
                g['TA|moonphase'] = metadata['moonphase']
                g['TA|timezone'] = metadata['timezone']
                g['TA|format'] = metadata['format']
                g['TA|channels'] = metadata['channels']
                g['TA|device'] =  metadata['device']
                g['TA|copyright'] = metadata['copyright']

                g.write(make_backup=False)
        else:
            print(f"Existing GUANO metadata detected in {metadata['wave']}, use the --force option to overwrite.")
    except Exception as e:
        print(f"Exception caught: {e}")

def validate_timezone(value):
    if value not in pytz.all_timezones:
        raise argparse.ArgumentTypeError("Specified time zone not found in time zone database.")

    return value

def validate_intorstr(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

def validate_longitude(value):
    val = float(value)

    if val < -180 or val > 180:
        raise argparse.ArgumentTypeError("Longitude must be between 180 and -180.")

    return val

def validate_latitude(value):
    val = float(value)

    if val < -90 or val > 90:
        raise argparse.ArgumentTypeError("Latitude must be between 90 and -90.")

    return val

def ParseCommandLineArguments():
    arg_parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description="Talon recording scheduler.")
    arg_parser.add_argument('--config', default="/opt/talon/etc/talon.ini", type=str, help="Path to a configuration file.")

    arg_parser.add_argument('-d', '--device', help='Audio device to use (numeric ID or substring as provided by the --list-devices option.)')
    arg_parser.add_argument('-r', '--rate', default=48000, choices=[48000, 44100, 22050], type=int, help='Sampling rate.')
    arg_parser.add_argument('-c', '--channels', default=1, type=int, help='Number of input channels to record.')
    arg_parser.add_argument('-f', '--format', default='PCM_32', choices=['PCM_8', 'PCM_16', 'PCM_24', 'PCM_32'], type=str, help='Sound file bit depth.')

    arg_parser.add_argument('--longitude', help="Longitude, in decimal format, of the location where the audio was recorded.")
    arg_parser.add_argument('--latitude', help="Latitude, in decimal format, of the location where the audio was recorded.")
    arg_parser.add_argument('--timezone', help="Timezone of the location where the audio was recorded.")
    arg_parser.add_argument('--name', type=str, help="A descriptive name of the recording station.")
    arg_parser.add_argument('--region', type=str, help="A descriptive name of the recording station.")
    arg_parser.add_argument('--location', type=str, help="A descriptive name of the recording station.")
    arg_parser.add_argument('--copyright', type=str, help="A descriptive name of the recording station.")

    arg_parser.add_argument('--duration', type=int, help='Duration of recording in minutes (max 1440, or 24 hours).')

    arg_parser.add_argument('--writemd', action='store_true', help='Print extra debugging information.')
    arg_parser.add_argument('--checkmd', action='store_true', help='Print extra debugging information.')
    arg_parser.add_argument('--force', action='store_true', help='Print extra debugging information.')
    arg_parser.add_argument('--debug', action='store_true', help='Print extra debugging information.')

    return arg_parser

def main():
    arg_parser = ParseCommandLineArguments()
    args = arg_parser.parse_args()
    signal.signal(signal.SIGINT, signal_handler)

    globstr = "*.[wW][aA][vV]"

    global debug
    debug = args.debug

    wavs = []
    vals = {}

    # read values from a config file instead, if we can't read all values
    # from the config file, then exit so we're not using a mix of cli and
    # config values
    if os.path.exists(args.config):
        try:
            config = configparser.ConfigParser()
            config.read(args.config)

            vals['latitude'] = validate_latitude(config['location']['latitude']) if args.latitude is None else args.latitude
            vals['longitude'] = validate_longitude(config['location']['longitude']) if args.longitude is None else args.longitude
            vals['timezone'] = validate_timezone(config['location']['timezone']) if args.timezone is None else args.timezone
            vals['region'] = config['location']['region'] if args.region is None else args.region
            vals['name'] = config['audio']['name'] if args.name is None else args.name
            vals['location'] = config['ebird']['location'] if args.location is None else args.location
            vals['copyright'] = config['general']['copyright'] if args.copyright is None else args.copyright
            vals['device'] = config['audio']['device'] if args.device is None else args.device
        except configparser.MissingSectionHeaderError as e:
            print(f"Error parsing config, the supplied config file contains no section headers.")
            sys.exit(1)
        except KeyError as e:
            if debug:
                print(f"Error parsing config, unable to find key: {e}, using commandline arguments instead (if available.)")
        except argparse.ArgumentTypeError as e:
            print(f"Error parsing config, invalid value specified for: {e}")
            sys.exit(1)

    for wavfile in Path('.').glob(globstr):
        md = get_metadata(wavfile, vals)

        if len(md):
            wavs.append(md)
        else:
            if debug:
                print(f"No GUANO data found in {wavfile}")

        if args.writemd:
            write_guano_md(md, args.force, args.checkmd)

    wavs = sorted(wavs, key=lambda d: d['start'])

    for md in wavs:
        format = md['format'].replace('PCM_', '')
        print(f"{md['wave']}  {md['start'].strftime('%Y%m%d-%H%M%S%z')}  {md['duration']:7.2f}  {md['rate']:5d}  {md['channels']:2d}  {format:2}  {md['latitude']:8.5f}, {md['longitude']:8.5f}  {md['nfc']*1}  {md['nighthawk']*1}  {md['birdnet']*1}")

if __name__ == "__main__":
    main()
