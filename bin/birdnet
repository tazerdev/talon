#!/opt/talon-venv/bin/python3

import os
import sys
import csv
import signal
import argparse
from datetime import datetime as dt
from birdnetlib import Recording
from birdnetlib.analyzer import Analyzer
from datetime import datetime as dt


def signal_handler(signum, frame):
    print("CTRL-C detected, exiting.")

    signal.signal(signum, signal.SIG_IGN)
    sys.exit(0)

def validate_longitude(value):
    val = float(value)

    if val < -180 or val > 180:
        raise argparse.ArgumentTypeError("Longitude must be between 180 and -180.")

    return val

def validate_latitude(value):
    val = float(value)

    if val < -90 or val > 90:
        raise argparse.ArgumentTypeError("Latitude must be between 90 and -90.")

    return val

def ParseCommandLineArguments():
    arg_parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description="talon is a tool for processing Nighthawk and BirdNET detection files.")
    arg_parser.add_argument('--longitude', type=validate_longitude, default=-78.63909694937483, help="Longitude, in decimal format, of the location where the audio was recorded.")
    arg_parser.add_argument('--latitude', type=validate_latitude, default=35.780480199773415, help="Latitude, in decimal format, of the location where the audio was recorded.")

    arg_parser.add_argument('-p', '--path', default=".", type=str, help="Directory or file to parse.")
    arg_parser.add_argument('-f', '--force', action='store_true', help="Force the recreation of lables, clips, or graphs if they already exist.")
    arg_parser.add_argument('-d', '--debug', action='store_true', help="Display information which may be helpful for debugging.")
    arg_parser.add_argument('-v', '--verbose', action='store_true', help="Display more information about what talon is doing.")

    return arg_parser

def main():
    signal.signal(signal.SIGINT, signal_handler)

    arg_parser = ParseCommandLineArguments()
    args = arg_parser.parse_args()

    if os.path.exists(args.path):
        curpath, filename = os.path.split(args.path)
        filename, extension = os.path.splitext(filename)

        fparsed = filename.split('_')
        start_dt = dt.strptime(f"{fparsed[1]} {fparsed[2]}", '%Y%m%d %H%M%S%z')
        analyzer = Analyzer()

        recording = Recording(
            analyzer,
            args.path,
            min_conf=0.25,
            lat=args.latitude,
            lon=args.longitude,
            date=start_dt,
        #    is_predicted_for_location_and_date=True,
        )

        recording.analyze()
        print(type(recording.detections))

        outfile = os.path.join(curpath, filename + '_birdnet.csv')

        if not os.path.exists(outfile) or args.force:
            if len(recording.detections) > 0:
                print(f"Writing CSV to {outfile}")

                keys = recording.detections[0].keys()

                with open(outfile, 'w', newline='') as f:
                    dw = csv.DictWriter(f, keys)
                    dw.writeheader()
                    dw.writerows(recording.detections)
            else:
                open(outfile, 'a').close()

if __name__ == "__main__":
    main()
