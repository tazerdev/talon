#!/opt/talon/bin/python3

import os
import sys
import json
import pytz
import time
import wave
import ephem
import guano
import queue
import signal
import argparse
import threading
import configparser
import sounddevice as sd
import soundfile as sf
from datetime import datetime
from datetime import timezone
from datetime import timedelta

def signal_handler(signum, frame):
    signal.signal(signum, signal.SIG_IGN)

    print("CTRL-C detected, cleaning up before exiting...")

   # ensure the recording thread gets alerted that we need to stop
    tev.set()

    time.sleep(1)

    record_post(vals.copy())

    sys.exit(0)

def sleepuntil(end):
    while True:
        delta = end - time.time()

        if delta <= 0:
            break
        else:
            time.sleep(delta / 2)

def validate_timezone(value):
    if value not in pytz.all_timezones:
        raise argparse.ArgumentTypeError("Specified time zone not found in time zone database.")

    return value

def validate_intorstr(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

def validate_longitude(value):
    val = float(value)

    if val < -180 or val > 180:
        raise argparse.ArgumentTypeError("Longitude must be between 180 and -180.")

    return val

def validate_latitude(value):
    val = float(value)

    if val < -90 or val > 90:
        raise argparse.ArgumentTypeError("Latitude must be between 90 and -90.")

    return val

def callback(indata, frames, time, status):
    """
    This is called from a separate thread for each audio block.
    """
    if status:
        print(status, file=sys.stderr)

    q.put(indata.copy())

def record(callback):
    with sf.SoundFile(vals['wave'], mode='x', samplerate=vals['rate'], channels=vals['channels'], subtype=vals['format']) as file:
        with sd.InputStream(samplerate=vals['rate'], device=vals['device'], channels=vals['channels'], callback=callback):
            while True:
                file.write(q.get())

                if tev.is_set():
                    break

def record_post(metadata):
    """
    Writes metadata to WAV file after the recording is finished.
    """
    try:
        if debug:
            print(f"[{datetime.now()}] Writing GUANO data to {metadata['wave']}")

        # caculate actual duration
        if os.path.exists(metadata['wave']):
            infile = wave.open(metadata['wave'])

        rate = infile.getframerate()
        infile.setpos(0)
        nfr = infile.getnframes()
        metadata['duration'] = nfr / rate

        infile.close()

        # write guano header
        g = guano.GuanoFile(metadata['wave'])
        g['loc position'] = f"{metadata['latitude']} {metadata['longitude']}"
        g['timestamp'] = metadata['start'].isoformat()
        g['original filename'] = metadata['wave']
        g['length'] = metadata['duration']
        g['samplerate'] = metadata['rate']
        g['TA|station'] = metadata['name']
        g['TA|moonphase'] = metadata['moonphase']
        g['TA|timezone'] = metadata['timezone']
        g['TA|format'] = metadata['format']
        g['TA|channels'] = metadata['channels']
        g['TA|device'] =  metadata['device']
        g['TA|copyright'] = metadata['copyright']

        g.write(make_backup=False)
    except Exception as e:
        print(f"Exception caught: {e}")
    else:
        # if the guano header was written successfully
        # then discard the json file
        if os.path.exists(metadata['json']):
            os.remove(metadata['json'])

    # we're done, remove the lock
    if os.path.exists(metadata['wave'] + '.LCK'):
        os.remove(metadata['wave'] + '.LCK')

def ParseCommandLineArguments():
    arg_parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description="Talon recording scheduler.")
    arg_parser.add_argument('--config', default="/opt/talon/etc/talon.ini", type=str, help="Path to a configuration file.")

    arg_parser.add_argument('-l', '--list-devices', action='store_true', help='Display available audio devices.')
    arg_parser.add_argument('-d', '--device', type=validate_intorstr,help='Audio device to use (numeric ID or substring as provided by the --list-devices option.)')
    arg_parser.add_argument('-r', '--rate', default=48000, choices=[48000, 44100, 22050], type=int, help='Sampling rate.')
    arg_parser.add_argument('-c', '--channels', default=1, type=int, help='Number of input channels to record.')
    arg_parser.add_argument('-f', '--format', default='PCM_32', choices=['PCM_8', 'PCM_16', 'PCM_24', 'PCM_32'], type=str, help='Sound file bit depth.')

    arg_parser.add_argument('--longitude', type=validate_longitude, default=-122.34930532895686, help="Longitude, in decimal format, of the location where the audio was recorded.")
    arg_parser.add_argument('--latitude', type=validate_latitude, default=47.620529386334695, help="Latitude, in decimal format, of the location where the audio was recorded.")
    arg_parser.add_argument('--timezone', type=validate_timezone, default="US/Pacific", help="Timezone of the location where the audio was recorded.")
    arg_parser.add_argument('--name', type=str, default="RPI1", help="A descriptive name of the recording station.")

    arg_parser.add_argument('--duration', default=60, type=int, help='Duration of recording in minutes (max 1440, or 24 hours).')
    arg_parser.add_argument('--debug', action='store_true', help='Print extra debugging information.')

    return arg_parser

def main():
    arg_parser = ParseCommandLineArguments()
    args = arg_parser.parse_args()
    signal.signal(signal.SIGINT, signal_handler)

    # setup some global variables
    global q
    q = queue.Queue()

    global debug
    debug = args.debug

    global tev
    tev = threading.Event()

    global vals

    # use cli values by default
    vals = {
        'format': args.format,
        'channels': args.channels,
        'rate': args.rate,
        'latitude': args.latitude,
        'longitude': args.longitude,
        'timezone': args.timezone,
        'name': args.name,
        'device': args.device,
        'copyright': ""
    }

    # read values from a config file instead, if we can't read all values
    # from the config file, then exit so we're not using a mix of cli and
    # config values
    if os.path.exists(args.config):
        try:
            config = configparser.ConfigParser()
            config.read(args.config)

            vals['latitude'] = validate_latitude(config['location']['latitude'])
            vals['longitude'] = validate_longitude(config['location']['longitude'])
            vals['timezone'] = validate_timezone(config['location']['timezone'])
            vals['name'] = config['audio']['name']
            vals['format'] = config['audio']['format']
            vals['channels'] = int(config['audio']['channels'])
            vals['rate'] = int(config['audio']['rate'])
            vals['device'] = config['audio']['device']
            vals['copyright'] = config['general']['copyright']
        except configparser.MissingSectionHeaderError as e:
            print(f"Error parsing config, the supplied config file contains no section headers.")
            sys.exit(1)
        except KeyError as e:
            if debug:
                print(f"Error parsing config, unable to find key: {e}, using commandline arguments instead (if available.)")
        except argparse.ArgumentTypeError as e:
            print(f"Error parsing config, invalid value specified for: {e}")
            sys.exit(1)

    curtz = pytz.timezone(vals['timezone'])

    if args.list_devices:
        devs = sd.query_devices()
        max_length = max(len(d["name"]) for d in devs)

        print("Id    Rate      Ch    Name")

        for dev in devs:
            if dev['max_output_channels'] == 0:
                name = dev['name'].replace('\n','')
                print(f"[{dev['index']:2d}] {dev['default_samplerate']:9.2f} {dev['max_output_channels']:4d}   {name}")
    else:
        try:
            # calculate moon phase
            cur = ephem.Moon(datetime.now())
            vals['moonphase'] = cur.moon_phase

            # running query_devices ensures that the device is available before proceeding
            device_info = sd.query_devices(args.device, 'input')
            vals['device'] = device_info['name']

            # ensure the event flag is cleared in case this isn't our first time around
            tev.clear()

            # begin scheduled recordings
            dur = args.duration

            # before we enter the loop we'll do a partial recording for the time
            # that remains during the current interval. if the user specifies a
            # one hour recording, we'll determine how much time remains until we
            # reach the nearest whole hour (e.g., 04:00, 23:00, etc).
            vals['start'] = curtz.localize(datetime.now())
            prev_interval = vals['start'].replace(minute=(vals['start'].minute // dur) * dur, second=0, microsecond=0)
            next_interval = prev_interval + timedelta(seconds=dur * 60)
            remaining = next_interval - vals['start']

            # setup our recording and json file names
            curname = f"{vals['name']}_{vals['start'].strftime('%Y%m%d_%H%M%S%z')}"
            vals['wave'] = curname + '.WAV'
            vals['json'] = curname + '.json'

            if debug:
                print(f"Recording data from {vals['device']} to {vals['wave']}.WAV")
                print(f"[{datetime.now()}]: initial: start: {vals['start']}, stop: {next_interval}, duration: {remaining}")

            # write metadata to file before recording in case we lose power
            # or the process is killed in an unfriendly manner. we can then
            # commit the metadata using another tool like talon or tls
            with open(vals['json'], 'w') as f:
                json.dump(vals, f, indent=4, sort_keys=True, default=str)

            # create a lock file so the transfer app knows not
            # to touch it.
            with open(vals['wave'] + '.LCK', 'w') as f:
                f.write(str(os.getpid()))

            # setup and start the recording thread
            t1=threading.Thread(target=record, args=([callback]))
            t1.start()
            sleepuntil(next_interval.timestamp())

            # signal the thread to stop recording
            tev.set()

            # wait until the recording actually stops before proceeding
            # otherwise we'll get a device in use exception
            t1.join()

            t2=threading.Thread(target=record_post, args=(vals.copy(),))
            t2.start()

            while True:
                # calculate moon phase
                cur = ephem.Moon(datetime.now())
                vals['moonphase'] = cur.moon_phase

                # calculate start and stop times for our first recording
                vals['start'] = next_interval
                next_interval += timedelta(seconds=dur * 60)
                remaining = next_interval - curtz.localize(datetime.now())

                # setup our recording and json file names
                curname = f"{vals['name']}_{vals['start'].strftime('%Y%m%d_%H%M%S%z')}"
                vals['wave'] = curname + '.WAV'
                vals['json'] = curname + '.json'

                if debug:
                    print(f"[{curtz.localize(datetime.now())}]: loop: start: {vals['start']}, stop: {next_interval}, duration: {remaining}")

                with open(vals['json'], 'w') as f:
                    json.dump(vals, f, indent=4, sort_keys=True, default=str)

                # setup and start the recording thread
                # ensure the event flag is cleared in case this isn't our first time around
                tev.clear()

                # create a lock file so the transfer app knows not
                # to touch it.
                with open(vals['wave'] + '.LCK', 'w') as f:
                    f.write(str(os.getpid()))

                t1=threading.Thread(target=record, args=([callback]))
                t1.start()
                sleepuntil(next_interval.timestamp())

                # send a message to the thread to stop recording
                tev.set()

                # wait until the recording actually stops before proceeding
                # otherwise we'll get a device in use exception
                t1.join()

                metadata = vals.copy()
                t2=threading.Thread(target=record_post, args=(vals.copy(),))
                t2.start()

        except Exception as e:
            sys.exit(type(e).__name__ + ': ' + str(e))

if __name__ == "__main__":
    main()
