#!/usr/bin/python3

import os
import sys
import glob
import time
import shutil
import signal
import argparse

# handle ctrl-c
def signal_handler(signum, frame):
    signal.signal(signum, signal.SIG_IGN)
    cleanup() # give your process a chance to clean up
    sys.exit(0)

# perform clean up tasks here in case we're interrupted
def cleanup():
    print(f'Ctrl-C pressed, exiting program.')

def ParseCommandLineArguments():
    arg_parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description="transfer.py")
    arg_parser.add_argument('-s', '--source', default=".", type=str, help="Path to monitor for files.")
    arg_parser.add_argument('-d', '--destination', type=str, help="The directory to transfer the files.")
    arg_parser.add_argument('-e', '--extension', default="WAV", type=str, help="Extension of files to transfer.")
    arg_parser.add_argument('-t', '--time', default="15", type=int, help="Length of time (s) to sleep before checking source dir for more files.")
    arg_parser.add_argument('-v', '--verbose', action="store_true", help="Log more verbosely.")

    return arg_parser

def main():
    arg_parser = ParseCommandLineArguments()
    args = arg_parser.parse_args()

    signal.signal(signal.SIGINT, signal_handler)

    while True:
        for item in glob.glob(f'{args.source}/*.{args.extension}'):
            srcpath, srcfile = os.path.split(item)
            basename, extension = os.path.splitext(srcfile)

            lock_file = os.path.join(srcpath, srcfile + '.LCK')

            if not os.path.exists(lock_file):
                if args.verbose:
                    print(f"No lock file detected for : {os.path.join(srcpath, srcfile)}")

                if os.path.exists(args.destination):
                    dest = os.path.join(args.destination, srcfile)
                    tmp = dest + '.TMP'

                    print(f"Transferring {os.path.join(srcpath, srcfile)} to {tmp}")

                    shutil.move(item, tmp)

                    if args.verbose:
                        print(f"Renaming {tmp} to {dest}")

                    shutil.move(tmp, dest)
                else:
                    print(f"Path does not exist: {args.destination}")
            else:
                if args.verbose:
                    print(f"Lock detected on {os.path.join(srcpath, srcfile)}, skipping...")

        time.sleep(args.time)

if __name__ == "__main__":
    main()
